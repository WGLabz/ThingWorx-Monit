<?xml version="1.0" encoding="UTF-8"?>
<Entities
 majorVersion="9"
 minorVersion="3"
 universal="">
    <ThingTemplates>
        <ThingTemplate
         baseThingTemplate="GenericThing"
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         homeMashup=""
         inheritedValueStream=""
         name="TWX.Metrices.OSHIController_TT"
         projectName="TempTWXMetrices"
         tags=""
         thingPackage=""
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations>
                <AlertDefinitions
                 name="CPUInfo"></AlertDefinitions>
                <AlertDefinitions
                 name="CPUInfoJSON"></AlertDefinitions>
                <AlertDefinitions
                 name="DiskInfo"></AlertDefinitions>
                <AlertDefinitions
                 name="DiskInfoJSON"></AlertDefinitions>
                <AlertDefinitions
                 name="DomainName"></AlertDefinitions>
                <AlertDefinitions
                 name="HostName"></AlertDefinitions>
                <AlertDefinitions
                 name="MemoryInfo"></AlertDefinitions>
                <AlertDefinitions
                 name="PhysicalMemory"></AlertDefinitions>
            </AlertConfigurations>
            <ThingShape>
                <PropertyDefinitions>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="TWX.Metrices.ProcessorInfo_DS"
                     aspect.isIndexed="false"
                     aspect.isPersistent="true"
                     baseType="INFOTABLE"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="CPUInfo"
                     ordinal="24"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isIndexed="false"
                     aspect.isPersistent="false"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="CPUInfoJSON"
                     ordinal="12"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="TWX.Metrices.DiskInfo_DS"
                     aspect.isIndexed="false"
                     aspect.isPersistent="true"
                     baseType="INFOTABLE"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="DiskInfo"
                     ordinal="13"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.isIndexed="false"
                     aspect.isPersistent="false"
                     baseType="JSON"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="DiskInfoJSON"
                     ordinal="14"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="DomainName"
                     ordinal="23"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     baseType="STRING"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="HostName"
                     ordinal="22"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="TWX.Metrices.OSHIMemoryInfo_DS"
                     aspect.isIndexed="false"
                     aspect.isPersistent="true"
                     baseType="INFOTABLE"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="MemoryInfo"
                     ordinal="15"></PropertyDefinition>
                    <PropertyDefinition
                     aspect.cacheTime="0.0"
                     aspect.dataChangeType="VALUE"
                     aspect.dataShape="TWX.Metrices.RAMMemoryDetails_DS"
                     aspect.isIndexed="false"
                     aspect.isPersistent="true"
                     baseType="INFOTABLE"
                     category=""
                     description=""
                     isLocalOnly="false"
                     name="PhysicalMemory"
                     ordinal="21"></PropertyDefinition>
                </PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="Cached"
                     description=""
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="FetchDiskInfo">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="NotCached"
                     description=""
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="FetchProcesses">
                        <ResultType
                         aspect.dataShape="TWX.Metrices.ProcessesInfo_DS"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category="Cached"
                     description=""
                     isAllowOverride="true"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="InitCache">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="FetchDiskInfo">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        (function () {
                                            var diskInformation = Things['OSHIMetrices_Thing'].GetOSHIDiskInfo();
                                            var diskInfoTable = DataShapes["TWX.Metrices.DiskInfo_DS"].CreateValues();
                                        //throw JSON.stringify(diskInformation.INFO)
                                            diskInformation.INFO.map((disk, index) => {
                                        
                                                var partitionsInfo = DataShapes["TWX.Metrices.PartitionInfo_DS"].CreateValues();
                                        
                                                disk.partitions.map((partition, index2) => {
                                                    partitionsInfo.AddRow({
                                                        'MountPoint': partition.mountPoint,
                                                        'Identification': partition.identification,
                                                        'Size': partition.size,
                                                        'Type': partition.type,
                                                        'UUID': partition.uuid,
                                                        'Name': partition.name,
                                                        'ID': index2
                                                    });
                                                });
                                        
                                                diskInfoTable.AddRow({
                                                    "Timestamp": disk.timeStamp,
                                                    "partitions": partitionsInfo,
                                                    "WriteBytes": disk.writeBytes,
                                                    "Size": disk.size,
                                                    'Model': disk.model,
                                                    'CurrentQueueLength': disk.currentQueueLength,
                                                    'Writes': disk.writes,
                                                    'ReadBytes': disk.readBytes,
                                                    'Reads': disk.reads,
                                                    'Name': disk.name,
                                                    'TransferTime': disk.transferTime,
                                                    'ID': index
                                                });
                                        
                                            });
                                            me.DiskInfo = diskInfoTable;
                                            me.DiskInfoJSON = diskInformation;
                                            result = diskInfoTable;
                                        }());
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="FetchProcesses">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        (function () {
                                            var processesInformation = Things['OSHIMetrices_Thing'].GetOSHIProcessesDetails();
                                        
                                            var processesInfotable = DataShapes["TWX.Metrices.ProcessesInfo_DS"].CreateValues();
                                        
                                            processesInformation.INFO.map((process, index) => {
                                                processesInfotable.AddRow({
                                                    'MemPercentage': Math.ceil(process['%MEM']),
                                                    'CPUPercentage': Math.ceil(process['%CPU']),
                                                    'RSS': process.RSS,
                                                    'PID': process.PID,
                                                    'VSZ': process.VSZ,
                                                    'Name': process.NAME,
                                                    'ID': index
                                                });
                                        
                                            });
                                        
                                            result = processesInfotable;
                                        }());
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="InitCache">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        (function () {
                                            var processorDetails = Things['OSHIMetrices_Thing'].GetOSHIProcessorMetrices();
                                        
                                            // Create processor cache InfoTable
                                            var cacheTable = DataShapes["TWX.Metrices.ProcessorCache_DS"].CreateValues();
                                        
                                            processorDetails.processorCaches.map((proc, index) => {
                                                cacheTable.AddRow({
                                                    "Size": proc.cacheSize,
                                                    "Level": proc.level,
                                                    "Type": proc.type,
                                                    "Associativity": proc.associativity,
                                                    "ID": index
                                                });
                                            });
                                        
                                            var processorInfo = DataShapes['TWX.Metrices.ProcessorInfo_DS'].CreateValues();
                                            processorInfo.AddRow({
                                                Is64BitProcessor: processorDetails.processorIdentifier.cpu64bit,
                                                CacheDetails: cacheTable,
                                                LastRefresh: new Date(),
                                                PhysicalProcessorCount: processorDetails.physicalProcessorCount,
                                                ProcessorIdentifier: processorDetails.processorIdentifier.identifier,
                                                ProcessorLogicalCoreCount: processorDetails.logicalProcessorCount,
                                                ProcessorVendor: processorDetails.processorIdentifier.vendor,
                                                ProcessorArchitecture: processorDetails.processorIdentifier.microarchitecture,
                                                ProcessorFrequency: processorDetails.processorIdentifier.vendorFreq,
                                                ProcessorName: processorDetails.processorIdentifier.name
                                            });
                                        
                                        
                                            me.CPUInfoJSON = processorDetails;
                                            me.CPUInfo = processorInfo;
                                        
                                            //Cache Memory Information
                                            var memoryDetails = Things['OSHIMetrices_Thing'].GetOSHIMemoryMetrices();
                                        
                                            var memoryInfo = DataShapes['TWX.Metrices.OSHIMemoryInfo_DS'].CreateValues();
                                        
                                            memoryInfo.AddRow({
                                                AvilableMemory: memoryDetails.available,
                                                MempryPageSize: memoryDetails.pageSize,
                                                TotalMemory: memoryDetails.total,
                                                'VirtualMem-SwapTotal': memoryDetails.virtualMemory.swapTotal,
                                                'VirtualMem-VirtualInUse': memoryDetails.virtualMemory.virtualInUse,
                                                'VirtualMem-VirtualMax': memoryDetails.virtualMemory.virtualMax
                                            });
                                        
                                            me.MemoryInfo = memoryInfo;
                                            
                                            var phyMemory = DataShapes["TWX.Metrices.RAMMemoryDetails_DS"].CreateValues();
                                            memoryDetails.physicalMemory.map((mem, index) => {
                                                phyMemory.AddRow({
                                                    'ID': index,
                                                    'Type': mem.memoryType,
                                                    'Capacity': mem.capacity,
                                                    'Manufacturer': mem.manufacturer,
                                                    'Label': mem.bankLabel
                                                });
                                            });
                                            me.PhysicalMemory = phyMemory;
                                        
                                            //Cache Network Details
                                            var networkDetaials = Things['OSHIMetrices_Thing'].GetOSHINetworkParams();
                                            me.HostName = networkDetaials.hostName;
                                            me.DomainName = networkDetaials.domainName;
                                        }());
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <ImplementedShapes></ImplementedShapes>
            <SharedConfigurationTables></SharedConfigurationTables>
            <InstanceDesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </InstanceDesignTimePermissions>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
            <InstanceVisibilityPermissions>
                <Visibility></Visibility>
            </InstanceVisibilityPermissions>
        </ThingTemplate>
    </ThingTemplates>
</Entities>
